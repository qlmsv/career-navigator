import { readFile } from 'fs/promises'
import { logger } from './logger'

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (–¥–ª—è –Ω–∞—á–∞–ª–∞)
// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–∞–∫ pdf-parse, mammoth –¥–ª—è docx
export async function extractTextFromFile(filepath: string, filename: string): Promise<string> {
  try {
    const extension = filename.toLowerCase().split('.').pop()

    switch (extension) {
      case 'txt':
        return await extractFromTxt(filepath)
      case 'pdf':
        return await extractFromPdf(filepath)
      case 'doc':
      case 'docx':
        return await extractFromDoc(filepath)
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${extension}`)
    }
  } catch (error) {
    logger.error('‚ùå Error extracting text from file:', error)
    throw error
  }
}

async function extractFromTxt(filepath: string): Promise<string> {
  const buffer = await readFile(filepath)
  return buffer.toString('utf-8')
}

async function extractFromPdf(filepath: string): Promise<string> {
  try {
    const pdfjsLib = await import('pdfjs-dist')
    const { readFileSync } = await import('fs')

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Uint8Array (—á–∏—Ç–∞–µ–º –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π, –Ω–æ –ø–∞–º—è—Ç—å –¥–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞ –Ω—É–∂–µ–Ω parser)
    const data = new Uint8Array(readFileSync(filepath))

    const loadingTask = pdfjsLib.getDocument({ data })
    const pdf = await loadingTask.promise

    let fullText = ''
    for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
      const page = await pdf.getPage(pageNum)
      const textContent = await page.getTextContent()
      const pageText = textContent.items
        .map((item: any) => (typeof item === 'object' && 'str' in item ? (item as any).str : ''))
        .join(' ')
      fullText += pageText + '\n\n'
    }

    // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    ;(pdf as any).destroy?.()

    logger.info('üìÑ Extracted text from PDF', { filepath, pages: pdf.numPages })
    return fullText.trim()
  } catch (error) {
    logger.error('‚ùå Failed to parse PDF, fallback to mock', error)
    return generateMockPdfContent(filepath)
  }
}

async function extractFromDoc(filepath: string): Promise<string> {
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mammoth –¥–ª—è docx
  logger.warn('‚ö†Ô∏è DOC parsing not implemented, using mock content')
  return generateMockDocContent(filepath)
}

function generateMockPdfContent(filepath: string): string {
  const filename = filepath.split('/').pop() || 'document'

  return `
# ${filename.replace(/\.[^/.]+$/, '')}

## –í–≤–µ–¥–µ–Ω–∏–µ

–î–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –≤–∫–ª—é—á–∞—é—Ç –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –º–µ—Ç–æ–¥–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∫–∞—Ä—å–µ—Ä–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.

## –ì–ª–∞–≤–∞ 1: –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏

### 1.1 –ú–æ–¥–µ–ª—å "–ë–æ–ª—å—à–∞—è –ø—è—Ç–µ—Ä–∫–∞"

–ú–æ–¥–µ–ª—å Big Five —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∫ –∞–Ω–∞–ª–∏–∑—É –ª–∏—á–Ω–æ—Å—Ç–∏. –û–Ω–∞ –≤–∫–ª—é—á–∞–µ—Ç –ø—è—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤:

**–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É (Openness)**
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –Ω–æ–≤—ã–º –∏–¥–µ—è–º –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º—É –º—ã—à–ª–µ–Ω–∏—é
- –ò–Ω—Ç–µ—Ä–µ—Å –∫ –∏—Å–∫—É—Å—Å—Ç–≤—É, –∫—É–ª—å—Ç—É—Ä–µ –∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º
- –õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é

**–î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å (Conscientiousness)**  
- –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
- –°–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π
- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤

**–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è (Extraversion)**
- –≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö
- –°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –æ–±—â–µ–Ω–∏—é –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤—É
- –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–º

**–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (Agreeableness)**
- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞–º
- –≠–º–ø–∞—Ç–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π
- –î–æ–≤–µ—Ä–∏–µ –∏ –∞–ª—å—Ç—Ä—É–∏–∑–º

**–ù–µ–π—Ä–æ—Ç–∏–∑–º (Neuroticism)**
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏
- –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞

### 1.2 –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ

–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è:
- –ü–æ–¥–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏ –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ—É—á–∏–Ω–≥–∞ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞

## –ì–ª–∞–≤–∞ 2: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏

### 2.1 –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ —É–º–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á:
- –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –≤ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
- –í–ª–∞–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—Ä–æ–±–ª–µ–º–Ω–æ-—Ä–µ—à–∞—é—â–∏–µ –Ω–∞–≤—ã–∫–∏

### 2.2 Soft skills

–ú–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:
- –õ–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
- –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≥–∏–±–∫–æ—Å—Ç—å

### 2.3 –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏

–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–≤–∏–∂—É—â–∏–µ —Å–∏–ª—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è:
- –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –∞–º–±–∏—Ü–∏–∏ –∏ —Ü–µ–ª–∏
- –¶–µ–Ω–Ω–æ—Å—Ç–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
- –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏

## –ì–ª–∞–≤–∞ 3: –ú–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

### 3.1 –ü—Å–∏—Ö–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã

–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:
- –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∏ (NEO-PI-R, 16PF)
- –¢–µ—Å—Ç—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã

### 3.2 –ò–Ω—Ç–µ—Ä–≤—å—é –∏ –±–µ—Å–µ–¥—ã

–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é:
- –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã (STAR-–º–µ—Ç–æ–¥)
- –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
- –ü—Ä–æ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏

### 3.3 –ê—Å—Å–µ—Å—Å–º–µ–Ω—Ç-—Ü–µ–Ω—Ç—Ä—ã

–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤ —Å–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö:
- –ì—Ä—É–ø–ø–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
- –†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã –∏ —Å–∏–º—É–ª—è—Ü–∏–∏

## –ì–ª–∞–≤–∞ 4: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤ HR

### 4.1 –¶–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è

–í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è–µ—Ç –ø–æ–¥—Ö–æ–¥—ã –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö.

### 4.2 –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–µ

–ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Ä–µ–∑—é–º–µ, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Ç–±–æ—Ä–∞. –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å –∏ –ø–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–π–º–∞.

### 4.3 –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—ã—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º —É–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–∞–ª–∞–Ω—Ç–æ–≤. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–∑–≤–∏—Ç–∏—è, –≥–∏–±–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏.

## –ì–ª–∞–≤–∞ 5: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

### 5.1 –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –æ—Ü–µ–Ω–∫–∏

–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, –≤–∫–ª—é—á–∞—é—â–µ–π –ø—Å–∏—Ö–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã, –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –∞—Å—Å–µ—Å—Å–º–µ–Ω—Ç-—Ü–µ–Ω—Ç—Ä—ã.

### 5.2 –û–±—É—á–µ–Ω–∏–µ HR-–∫–æ–º–∞–Ω–¥—ã

–ü—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º, –≤–∫–ª—é—á–∞—é—â–∏–µ –∏–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–∏–∫ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

### 5.3 –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏

–°–ø–æ—Å–æ–±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ HR-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –æ–±—â–∏–º–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å –æ—Ü–µ–Ω–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –≤–∫–ª—é—á–∞—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ—Ü–µ–Ω–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è, –¥–µ–ª–∞—è –∏—Ö –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏.

–ë—É–¥—É—â–µ–µ HR-—Å—Ñ–µ—Ä—ã —Å–≤—è–∑–∞–Ω–æ —Å –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–µ–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
`
}

function generateMockDocContent(filepath: string): string {
  // –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è DOC —Ñ–∞–π–ª–æ–≤
  return generateMockPdfContent(filepath)
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏
export function splitTextIntoChunks(
  text: string,
  options: {
    chunkSize?: number
    chunkOverlap?: number
    splitOnSentences?: boolean
  } = {},
): string[] {
  const {
    chunkSize = 800, // —Å–∏–º–≤–æ–ª–æ–≤ –≤ —á–∞–Ω–∫–µ (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è TXT)
    chunkOverlap = 100, // –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
    splitOnSentences = true,
  } = options

  if (splitOnSentences) {
    return splitBySentences(text, chunkSize, chunkOverlap)
  } else {
    return splitByWords(text, chunkSize, chunkOverlap)
  }
}

function splitBySentences(text: string, chunkSize: number, overlap: number): string[] {
  // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
  const paragraphs = text.split(/\n\s*\n/).filter((p) => p.trim().length > 0)
  const chunks: string[] = []

  let currentChunk = ''

  for (const paragraph of paragraphs) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞–Ω–∫—É
    const paragraphToAdd = paragraph.trim()

    if (currentChunk.length + paragraphToAdd.length > chunkSize && currentChunk.length > 0) {
      // –ï—Å–ª–∏ —á–∞–Ω–∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–∏–ª—Å—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
      chunks.push(currentChunk.trim())
      currentChunk = paragraphToAdd
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞–Ω–∫—É
      currentChunk += (currentChunk ? '\n\n' : '') + paragraphToAdd
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (currentChunk.trim().length > 0) {
    chunks.push(currentChunk.trim())
  }

  // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –º–∞–ª–æ —á–∞–Ω–∫–æ–≤ - —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
  if (chunks.length < 3 && text.length > chunkSize * 2) {
    return splitByFixedSize(text, chunkSize, overlap)
  }

  return chunks.filter((chunk) => chunk.length > 50)
}

function splitByFixedSize(text: string, chunkSize: number, overlap: number): string[] {
  const chunks: string[] = []

  for (let i = 0; i < text.length; i += chunkSize - overlap) {
    const chunk = text.slice(i, i + chunkSize).trim()
    if (chunk.length > 50) {
      chunks.push(chunk)
    }
  }

  return chunks
}

function splitByWords(text: string, chunkSize: number, overlap: number): string[] {
  const words = text.split(/\s+/)
  const chunks: string[] = []

  for (let i = 0; i < words.length; i += chunkSize - overlap) {
    const chunk = words.slice(i, i + chunkSize).join(' ')
    if (chunk.trim().length > 50) {
      chunks.push(chunk.trim())
    }
  }

  return chunks
}

function getOverlapText(text: string, overlapLength: number): string {
  if (text.length <= overlapLength) return text

  const startPos = text.length - overlapLength
  const overlapText = text.substring(startPos)

  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–∏
  const sentenceStart = overlapText.search(/[.!?]\s+/)
  if (sentenceStart !== -1) {
    return overlapText.substring(sentenceStart + 2)
  }

  return overlapText
}
