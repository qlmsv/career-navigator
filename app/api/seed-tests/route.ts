import { NextResponse } from 'next/server'
import { supabaseAdmin } from '@/lib/supabase-server'

export async function POST() {
  try {
    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö —Å—Ö–µ–º
    const makeMarks = { 1: '1', 2: '2', 3: '3', 4: '4', 5: '5' } as const
    const buildBig5Schema = () => {
      const properties: Record<string, any> = {
        intro: {
          type: 'void',
          'x-component': 'FormItem',
          'x-content':
            'üìä –û—Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5\n\n1 = –ê–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω | 5 = –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω',
        },
      }
      const big5Constructs = [
        'Extraversion',
        'Agreeableness',
        'Conscientiousness',
        'Neuroticism',
        'Openness',
      ]
      for (let i = 1; i <= 50; i += 1) {
        const construct = big5Constructs[(i - 1) % big5Constructs.length]
        const subconstruct = `${construct} Facet ${(Math.floor((i - 1) / 5) % 6) + 1}`
        const skill = `${construct} Skill ${(i % 2) + 1}`
        properties[`q${i}`] = {
          type: 'number',
          title: `${i}. –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Big Five ‚Ññ${i}`,
          'x-decorator': 'FormItem',
          'x-component': 'Slider',
          'x-component-props': { min: 1, max: 5, step: 1, marks: makeMarks },
          'x-meta': { construct, subconstruct, skill, reverse: i % 5 === 0 },
          required: true,
        }
      }
      return { type: 'object', properties }
    }

    const buildHexacoSchema = () => {
      const properties: Record<string, any> = {
        intro: {
          type: 'void',
          'x-component': 'FormItem',
          'x-content':
            '‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ –æ—Ç 1 –¥–æ 5\n\n1 –∑–≤–µ–∑–¥–∞ = –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω | 5 –∑–≤–µ–∑–¥ = –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Å–æ–≥–ª–∞—Å–µ–Ω',
        },
      }
      const hexacoConstructs = [
        'Honesty-Humility',
        'Emotionality',
        'eXtraversion',
        'Agreeableness',
        'Conscientiousness',
        'Openness',
      ]
      for (let i = 1; i <= 60; i += 1) {
        const construct = hexacoConstructs[(i - 1) % hexacoConstructs.length]
        const subconstruct = `${construct} Facet ${(Math.floor((i - 1) / 6) % 6) + 1}`
        const skill = `${construct} Skill ${(i % 3) + 1}`
        properties[`h${i}`] = {
          type: 'number',
          title: `${i}. –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ HEXACO ‚Ññ${i}`,
          'x-decorator': 'FormItem',
          'x-component': 'Rate',
          'x-component-props': { count: 5 },
          'x-meta': { construct, subconstruct, skill, reverse: i % 6 === 0 },
          required: true,
        }
      }
      return { type: 'object', properties }
    }

    const big5Schema = buildBig5Schema()

    // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã (–ø–æ title) –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    await supabaseAdmin.from('tests').delete().eq('title', 'Big Five - –¢–µ—Å—Ç –ª–∏—á–Ω–æ—Å—Ç–∏')
    await supabaseAdmin.from('tests').delete().eq('title', 'HEXACO - –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫')

    const { data: big5, error: big5Error } = await supabaseAdmin
      .from('tests')
      .insert({
        title: 'Big Five - –¢–µ—Å—Ç –ª–∏—á–Ω–æ—Å—Ç–∏',
        description:
          '–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫ –ë–æ–ª—å—à–æ–π –ü—è—Ç–µ—Ä–∫–∏ (50 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π). –û—Ü–µ–Ω–∏—Ç–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5.',
        formily_schema: big5Schema,
        status: 'published',
        show_results: true,
        allow_multiple_attempts: true,
        time_limit_minutes: 20,
      })
      .select()
      .single()

    if (big5Error) {
      throw new Error('Big5 error: ' + big5Error.message)
    }

    const hexacoSchema = buildHexacoSchema()

    const { data: hexaco, error: hexacoError } = await supabaseAdmin
      .from('tests')
      .insert({
        title: 'HEXACO - –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫',
        description: '–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫ HEXACO (60 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π). –û—Ü–µ–Ω–∏—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ –æ—Ç 1 –¥–æ 5.',
        formily_schema: hexacoSchema,
        status: 'published',
        show_results: true,
        allow_multiple_attempts: true,
        time_limit_minutes: 30,
      })
      .select()
      .single()

    if (hexacoError) {
      throw new Error('HEXACO error: ' + hexacoError.message)
    }

    return NextResponse.json({
      success: true,
      data: {
        big5,
        hexaco,
      },
      message: 'Tests created and published successfully!',
    })
  } catch (error) {
    console.error('Seed tests error:', error)
    return NextResponse.json(
      { success: false, error: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 },
    )
  }
}
