import { NextResponse } from 'next/server'
import { supabaseAdmin } from '@/lib/supabase-server'

export async function POST() {
  try {
    // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü - –ø–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –Ω–æ –º—ã —Å–º–æ–∂–µ–º –∏—Ö —Å–æ–∑–¥–∞—Ç—å
    
    const results = []
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try {
      const { data, error } = await supabaseAdmin
        .from('test_categories')
        .insert([
          {
            name: 'programming',
            name_ru: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
            description: '–¢–µ—Å—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            icon: 'üíª',
            color: '#3B82F6',
            order_index: 1
          }
        ])
        .select()
      
      if (error) {
        results.push({ table: 'test_categories', success: false, error: error.message })
      } else {
        results.push({ table: 'test_categories', success: true, message: 'Table exists and data inserted' })
      }
    } catch (err) {
      results.push({ table: 'test_categories', success: false, error: err instanceof Error ? err.message : 'Unknown error' })
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç
    try {
      const { data, error } = await supabaseAdmin
        .from('tests')
        .insert([
          {
            title: 'Test Test',
            title_ru: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ—Å—Ç',
            description: 'Test description',
            description_ru: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞',
            author_id: '00000000-0000-0000-0000-000000000000',
            status: 'published',
            is_public: true
          }
        ])
        .select()
      
      if (error) {
        results.push({ table: 'tests', success: false, error: error.message })
      } else {
        results.push({ table: 'tests', success: true, message: 'Table exists and data inserted' })
      }
    } catch (err) {
      results.push({ table: 'tests', success: false, error: err instanceof Error ? err.message : 'Unknown error' })
    }
    
    return NextResponse.json({
      success: true,
      message: 'Table creation test completed',
      results
    })
    
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    })
  }
}
