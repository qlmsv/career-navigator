-- üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ROW LEVEL SECURITY –ü–û–õ–ò–¢–ò–ö
-- –û—à–∏–±–∫–∞: new row violates row-level security policy for table "resume_analysis"

-- 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è resume_analysis
DROP POLICY IF EXISTS "Users can insert their own resume analysis" ON resume_analysis;
DROP POLICY IF EXISTS "Users can view their own resume analysis" ON resume_analysis;
DROP POLICY IF EXISTS "Users can update their own resume analysis" ON resume_analysis;

-- –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è resume_analysis
CREATE POLICY "Users can insert their own resume analysis"
  ON resume_analysis FOR INSERT
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can view their own resume analysis"
  ON resume_analysis FOR SELECT
  USING (user_id = auth.uid());

CREATE POLICY "Users can update their own resume analysis"
  ON resume_analysis FOR UPDATE
  USING (user_id = auth.uid())
  WITH CHECK (user_id = auth.uid());

-- 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è work_experience
DROP POLICY IF EXISTS "Users can manage their own work experience" ON work_experience;

CREATE POLICY "Users can insert their own work experience"
  ON work_experience FOR INSERT
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can view their own work experience"
  ON work_experience FOR SELECT
  USING (user_id = auth.uid());

CREATE POLICY "Users can update their own work experience"
  ON work_experience FOR UPDATE
  USING (user_id = auth.uid())
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can delete their own work experience"
  ON work_experience FOR DELETE
  USING (user_id = auth.uid());

-- 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è education_history
DROP POLICY IF EXISTS "Users can manage their own education history" ON education_history;

CREATE POLICY "Users can insert their own education history"
  ON education_history FOR INSERT
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can view their own education history"
  ON education_history FOR SELECT
  USING (user_id = auth.uid());

CREATE POLICY "Users can update their own education history"
  ON education_history FOR UPDATE
  USING (user_id = auth.uid())
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can delete their own education history"
  ON education_history FOR DELETE
  USING (user_id = auth.uid());

-- 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ RLS –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE resume_analysis ENABLE ROW LEVEL SECURITY;
ALTER TABLE work_experience ENABLE ROW LEVEL SECURITY;
ALTER TABLE education_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE test_results ENABLE ROW LEVEL SECURITY;

-- 5. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è service role (–¥–ª—è API operations)
-- –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –∫–æ–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
CREATE POLICY "Service role can manage all data"
  ON resume_analysis FOR ALL
  USING (auth.role() = 'service_role')
  WITH CHECK (auth.role() = 'service_role');

CREATE POLICY "Service role can manage all work experience"
  ON work_experience FOR ALL
  USING (auth.role() = 'service_role')
  WITH CHECK (auth.role() = 'service_role');

CREATE POLICY "Service role can manage all education history"
  ON education_history FOR ALL
  USING (auth.role() = 'service_role')
  WITH CHECK (auth.role() = 'service_role');

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
SELECT 
  schemaname,
  tablename,
  rowsecurity
FROM pg_tables 
WHERE tablename IN ('user_profiles', 'resume_analysis', 'work_experience', 'education_history', 'test_results');

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual,
  with_check
FROM pg_policies 
WHERE tablename IN ('user_profiles', 'resume_analysis', 'work_experience', 'education_history', 'test_results')
ORDER BY tablename, policyname;
